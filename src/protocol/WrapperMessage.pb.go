// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.10.1
// source: WrapperMessage.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TCP tunneling
type TcpDialMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId uint32 `protobuf:"varint,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	Address      string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *TcpDialMessage) Reset() {
	*x = TcpDialMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WrapperMessage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpDialMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpDialMessage) ProtoMessage() {}

func (x *TcpDialMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WrapperMessage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpDialMessage.ProtoReflect.Descriptor instead.
func (*TcpDialMessage) Descriptor() ([]byte, []int) {
	return file_WrapperMessage_proto_rawDescGZIP(), []int{0}
}

func (x *TcpDialMessage) GetConnectionId() uint32 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

func (x *TcpDialMessage) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type TcpDialResultMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId uint32 `protobuf:"varint,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	Address      string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Error        string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TcpDialResultMessage) Reset() {
	*x = TcpDialResultMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WrapperMessage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpDialResultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpDialResultMessage) ProtoMessage() {}

func (x *TcpDialResultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WrapperMessage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpDialResultMessage.ProtoReflect.Descriptor instead.
func (*TcpDialResultMessage) Descriptor() ([]byte, []int) {
	return file_WrapperMessage_proto_rawDescGZIP(), []int{1}
}

func (x *TcpDialResultMessage) GetConnectionId() uint32 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

func (x *TcpDialResultMessage) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TcpDialResultMessage) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TcpWriteMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId uint32 `protobuf:"varint,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	WriterId     uint64 `protobuf:"varint,2,opt,name=writer_id,json=writerId,proto3" json:"writer_id,omitempty"`
	Data         []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TcpWriteMessage) Reset() {
	*x = TcpWriteMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WrapperMessage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpWriteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpWriteMessage) ProtoMessage() {}

func (x *TcpWriteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WrapperMessage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpWriteMessage.ProtoReflect.Descriptor instead.
func (*TcpWriteMessage) Descriptor() ([]byte, []int) {
	return file_WrapperMessage_proto_rawDescGZIP(), []int{2}
}

func (x *TcpWriteMessage) GetConnectionId() uint32 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

func (x *TcpWriteMessage) GetWriterId() uint64 {
	if x != nil {
		return x.WriterId
	}
	return 0
}

func (x *TcpWriteMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type TcpWriteResultMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId uint32 `protobuf:"varint,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	WriterId     uint64 `protobuf:"varint,2,opt,name=writer_id,json=writerId,proto3" json:"writer_id,omitempty"`
	BytesWritten uint32 `protobuf:"varint,3,opt,name=bytes_written,json=bytesWritten,proto3" json:"bytes_written,omitempty"`
	Error        string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TcpWriteResultMessage) Reset() {
	*x = TcpWriteResultMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WrapperMessage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpWriteResultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpWriteResultMessage) ProtoMessage() {}

func (x *TcpWriteResultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WrapperMessage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpWriteResultMessage.ProtoReflect.Descriptor instead.
func (*TcpWriteResultMessage) Descriptor() ([]byte, []int) {
	return file_WrapperMessage_proto_rawDescGZIP(), []int{3}
}

func (x *TcpWriteResultMessage) GetConnectionId() uint32 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

func (x *TcpWriteResultMessage) GetWriterId() uint64 {
	if x != nil {
		return x.WriterId
	}
	return 0
}

func (x *TcpWriteResultMessage) GetBytesWritten() uint32 {
	if x != nil {
		return x.BytesWritten
	}
	return 0
}

func (x *TcpWriteResultMessage) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TcpReadMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId uint32 `protobuf:"varint,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	ReaderId     uint64 `protobuf:"varint,2,opt,name=reader_id,json=readerId,proto3" json:"reader_id,omitempty"`
	BufferSize   uint32 `protobuf:"varint,3,opt,name=buffer_size,json=bufferSize,proto3" json:"buffer_size,omitempty"`
}

func (x *TcpReadMessage) Reset() {
	*x = TcpReadMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WrapperMessage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpReadMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpReadMessage) ProtoMessage() {}

func (x *TcpReadMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WrapperMessage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpReadMessage.ProtoReflect.Descriptor instead.
func (*TcpReadMessage) Descriptor() ([]byte, []int) {
	return file_WrapperMessage_proto_rawDescGZIP(), []int{4}
}

func (x *TcpReadMessage) GetConnectionId() uint32 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

func (x *TcpReadMessage) GetReaderId() uint64 {
	if x != nil {
		return x.ReaderId
	}
	return 0
}

func (x *TcpReadMessage) GetBufferSize() uint32 {
	if x != nil {
		return x.BufferSize
	}
	return 0
}

type TcpReadResultMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId uint32 `protobuf:"varint,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	ReaderId     uint64 `protobuf:"varint,2,opt,name=reader_id,json=readerId,proto3" json:"reader_id,omitempty"`
	Data         []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	BytesRead    uint32 `protobuf:"varint,4,opt,name=bytes_read,json=bytesRead,proto3" json:"bytes_read,omitempty"`
	Error        string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TcpReadResultMessage) Reset() {
	*x = TcpReadResultMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WrapperMessage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpReadResultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpReadResultMessage) ProtoMessage() {}

func (x *TcpReadResultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WrapperMessage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpReadResultMessage.ProtoReflect.Descriptor instead.
func (*TcpReadResultMessage) Descriptor() ([]byte, []int) {
	return file_WrapperMessage_proto_rawDescGZIP(), []int{5}
}

func (x *TcpReadResultMessage) GetConnectionId() uint32 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

func (x *TcpReadResultMessage) GetReaderId() uint64 {
	if x != nil {
		return x.ReaderId
	}
	return 0
}

func (x *TcpReadResultMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TcpReadResultMessage) GetBytesRead() uint32 {
	if x != nil {
		return x.BytesRead
	}
	return 0
}

func (x *TcpReadResultMessage) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Terminal Pty
type TerminalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TerminalData) Reset() {
	*x = TerminalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WrapperMessage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalData) ProtoMessage() {}

func (x *TerminalData) ProtoReflect() protoreflect.Message {
	mi := &file_WrapperMessage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalData.ProtoReflect.Descriptor instead.
func (*TerminalData) Descriptor() ([]byte, []int) {
	return file_WrapperMessage_proto_rawDescGZIP(), []int{6}
}

func (x *TerminalData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type TerminalWidth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewWidth uint32 `protobuf:"varint,1,opt,name=new_width,json=newWidth,proto3" json:"new_width,omitempty"`
}

func (x *TerminalWidth) Reset() {
	*x = TerminalWidth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WrapperMessage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalWidth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalWidth) ProtoMessage() {}

func (x *TerminalWidth) ProtoReflect() protoreflect.Message {
	mi := &file_WrapperMessage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalWidth.ProtoReflect.Descriptor instead.
func (*TerminalWidth) Descriptor() ([]byte, []int) {
	return file_WrapperMessage_proto_rawDescGZIP(), []int{7}
}

func (x *TerminalWidth) GetNewWidth() uint32 {
	if x != nil {
		return x.NewWidth
	}
	return 0
}

type FileRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FileRead) Reset() {
	*x = FileRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WrapperMessage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRead) ProtoMessage() {}

func (x *FileRead) ProtoReflect() protoreflect.Message {
	mi := &file_WrapperMessage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRead.ProtoReflect.Descriptor instead.
func (*FileRead) Descriptor() ([]byte, []int) {
	return file_WrapperMessage_proto_rawDescGZIP(), []int{8}
}

func (x *FileRead) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type FileReadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Path     string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Error    string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	MimeType string `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
}

func (x *FileReadResult) Reset() {
	*x = FileReadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WrapperMessage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileReadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileReadResult) ProtoMessage() {}

func (x *FileReadResult) ProtoReflect() protoreflect.Message {
	mi := &file_WrapperMessage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileReadResult.ProtoReflect.Descriptor instead.
func (*FileReadResult) Descriptor() ([]byte, []int) {
	return file_WrapperMessage_proto_rawDescGZIP(), []int{9}
}

func (x *FileReadResult) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FileReadResult) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileReadResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FileReadResult) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

type FileReadDir struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FileReadDir) Reset() {
	*x = FileReadDir{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WrapperMessage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileReadDir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileReadDir) ProtoMessage() {}

func (x *FileReadDir) ProtoReflect() protoreflect.Message {
	mi := &file_WrapperMessage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileReadDir.ProtoReflect.Descriptor instead.
func (*FileReadDir) Descriptor() ([]byte, []int) {
	return file_WrapperMessage_proto_rawDescGZIP(), []int{10}
}

func (x *FileReadDir) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DirEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path     string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	IsDir    bool   `protobuf:"varint,3,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"`
	MimeType string `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	IsEmpty  bool   `protobuf:"varint,5,opt,name=is_empty,json=isEmpty,proto3" json:"is_empty,omitempty"`
}

func (x *DirEntry) Reset() {
	*x = DirEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WrapperMessage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirEntry) ProtoMessage() {}

func (x *DirEntry) ProtoReflect() protoreflect.Message {
	mi := &file_WrapperMessage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirEntry.ProtoReflect.Descriptor instead.
func (*DirEntry) Descriptor() ([]byte, []int) {
	return file_WrapperMessage_proto_rawDescGZIP(), []int{11}
}

func (x *DirEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DirEntry) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DirEntry) GetIsDir() bool {
	if x != nil {
		return x.IsDir
	}
	return false
}

func (x *DirEntry) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *DirEntry) GetIsEmpty() bool {
	if x != nil {
		return x.IsEmpty
	}
	return false
}

type FileReadDirResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string      `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Path  string      `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Entry []*DirEntry `protobuf:"bytes,3,rep,name=entry,proto3" json:"entry,omitempty"`
}

func (x *FileReadDirResult) Reset() {
	*x = FileReadDirResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WrapperMessage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileReadDirResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileReadDirResult) ProtoMessage() {}

func (x *FileReadDirResult) ProtoReflect() protoreflect.Message {
	mi := &file_WrapperMessage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileReadDirResult.ProtoReflect.Descriptor instead.
func (*FileReadDirResult) Descriptor() ([]byte, []int) {
	return file_WrapperMessage_proto_rawDescGZIP(), []int{12}
}

func (x *FileReadDirResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FileReadDirResult) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileReadDirResult) GetEntry() []*DirEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

// Initial message
type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WrapperMessage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_WrapperMessage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_WrapperMessage_proto_rawDescGZIP(), []int{13}
}

func (x *Service) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Hello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitHash        string     `protobuf:"bytes,1,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	BranchName        string     `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	PullRequest       string     `protobuf:"bytes,3,opt,name=pull_request,json=pullRequest,proto3" json:"pull_request,omitempty"`
	Slug              string     `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	Tag               string     `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
	BuildUrl          string     `protobuf:"bytes,6,opt,name=build_url,json=buildUrl,proto3" json:"build_url,omitempty"`
	BuildId           string     `protobuf:"bytes,7,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	JobId             string     `protobuf:"bytes,8,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	AuthorName        string     `protobuf:"bytes,9,opt,name=author_name,json=authorName,proto3" json:"author_name,omitempty"`
	AuthorAvatar      string     `protobuf:"bytes,10,opt,name=author_avatar,json=authorAvatar,proto3" json:"author_avatar,omitempty"`
	AuthorEmail       string     `protobuf:"bytes,11,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
	CiProvider        string     `protobuf:"bytes,12,opt,name=ci_provider,json=ciProvider,proto3" json:"ci_provider,omitempty"`
	AuthorEmailDomain string     `protobuf:"bytes,13,opt,name=author_email_domain,json=authorEmailDomain,proto3" json:"author_email_domain,omitempty"`
	WorkingDirectory  string     `protobuf:"bytes,14,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`
	Service           []*Service `protobuf:"bytes,15,rep,name=service,proto3" json:"service,omitempty"`
}

func (x *Hello) Reset() {
	*x = Hello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WrapperMessage_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hello) ProtoMessage() {}

func (x *Hello) ProtoReflect() protoreflect.Message {
	mi := &file_WrapperMessage_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hello.ProtoReflect.Descriptor instead.
func (*Hello) Descriptor() ([]byte, []int) {
	return file_WrapperMessage_proto_rawDescGZIP(), []int{14}
}

func (x *Hello) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *Hello) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *Hello) GetPullRequest() string {
	if x != nil {
		return x.PullRequest
	}
	return ""
}

func (x *Hello) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Hello) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Hello) GetBuildUrl() string {
	if x != nil {
		return x.BuildUrl
	}
	return ""
}

func (x *Hello) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *Hello) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *Hello) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *Hello) GetAuthorAvatar() string {
	if x != nil {
		return x.AuthorAvatar
	}
	return ""
}

func (x *Hello) GetAuthorEmail() string {
	if x != nil {
		return x.AuthorEmail
	}
	return ""
}

func (x *Hello) GetCiProvider() string {
	if x != nil {
		return x.CiProvider
	}
	return ""
}

func (x *Hello) GetAuthorEmailDomain() string {
	if x != nil {
		return x.AuthorEmailDomain
	}
	return ""
}

func (x *Hello) GetWorkingDirectory() string {
	if x != nil {
		return x.WorkingDirectory
	}
	return ""
}

func (x *Hello) GetService() []*Service {
	if x != nil {
		return x.Service
	}
	return nil
}

type HelloResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DashboardUrl string `protobuf:"bytes,1,opt,name=dashboard_url,json=dashboardUrl,proto3" json:"dashboard_url,omitempty"`
}

func (x *HelloResponse) Reset() {
	*x = HelloResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WrapperMessage_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloResponse) ProtoMessage() {}

func (x *HelloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_WrapperMessage_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloResponse.ProtoReflect.Descriptor instead.
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return file_WrapperMessage_proto_rawDescGZIP(), []int{15}
}

func (x *HelloResponse) GetDashboardUrl() string {
	if x != nil {
		return x.DashboardUrl
	}
	return ""
}

type MessageFromWrapClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Spec:
	//	*MessageFromWrapClient_Error
	//	*MessageFromWrapClient_TcpWriteResult
	//	*MessageFromWrapClient_TcpReadResult
	//	*MessageFromWrapClient_TcpDialResult
	//	*MessageFromWrapClient_TerminalData
	//	*MessageFromWrapClient_Hello
	//	*MessageFromWrapClient_FileReadResult
	//	*MessageFromWrapClient_FileReadDirResult
	Spec       isMessageFromWrapClient_Spec `protobuf_oneof:"spec"`
	ListenerId uint32                       `protobuf:"varint,10,opt,name=listener_id,json=listenerId,proto3" json:"listener_id,omitempty"`
}

func (x *MessageFromWrapClient) Reset() {
	*x = MessageFromWrapClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WrapperMessage_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageFromWrapClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageFromWrapClient) ProtoMessage() {}

func (x *MessageFromWrapClient) ProtoReflect() protoreflect.Message {
	mi := &file_WrapperMessage_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageFromWrapClient.ProtoReflect.Descriptor instead.
func (*MessageFromWrapClient) Descriptor() ([]byte, []int) {
	return file_WrapperMessage_proto_rawDescGZIP(), []int{16}
}

func (m *MessageFromWrapClient) GetSpec() isMessageFromWrapClient_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *MessageFromWrapClient) GetError() string {
	if x, ok := x.GetSpec().(*MessageFromWrapClient_Error); ok {
		return x.Error
	}
	return ""
}

func (x *MessageFromWrapClient) GetTcpWriteResult() *TcpWriteResultMessage {
	if x, ok := x.GetSpec().(*MessageFromWrapClient_TcpWriteResult); ok {
		return x.TcpWriteResult
	}
	return nil
}

func (x *MessageFromWrapClient) GetTcpReadResult() *TcpReadResultMessage {
	if x, ok := x.GetSpec().(*MessageFromWrapClient_TcpReadResult); ok {
		return x.TcpReadResult
	}
	return nil
}

func (x *MessageFromWrapClient) GetTcpDialResult() *TcpDialResultMessage {
	if x, ok := x.GetSpec().(*MessageFromWrapClient_TcpDialResult); ok {
		return x.TcpDialResult
	}
	return nil
}

func (x *MessageFromWrapClient) GetTerminalData() *TerminalData {
	if x, ok := x.GetSpec().(*MessageFromWrapClient_TerminalData); ok {
		return x.TerminalData
	}
	return nil
}

func (x *MessageFromWrapClient) GetHello() *Hello {
	if x, ok := x.GetSpec().(*MessageFromWrapClient_Hello); ok {
		return x.Hello
	}
	return nil
}

func (x *MessageFromWrapClient) GetFileReadResult() *FileReadResult {
	if x, ok := x.GetSpec().(*MessageFromWrapClient_FileReadResult); ok {
		return x.FileReadResult
	}
	return nil
}

func (x *MessageFromWrapClient) GetFileReadDirResult() *FileReadDirResult {
	if x, ok := x.GetSpec().(*MessageFromWrapClient_FileReadDirResult); ok {
		return x.FileReadDirResult
	}
	return nil
}

func (x *MessageFromWrapClient) GetListenerId() uint32 {
	if x != nil {
		return x.ListenerId
	}
	return 0
}

type isMessageFromWrapClient_Spec interface {
	isMessageFromWrapClient_Spec()
}

type MessageFromWrapClient_Error struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type MessageFromWrapClient_TcpWriteResult struct {
	//TCP
	TcpWriteResult *TcpWriteResultMessage `protobuf:"bytes,2,opt,name=tcp_write_result,json=tcpWriteResult,proto3,oneof"`
}

type MessageFromWrapClient_TcpReadResult struct {
	TcpReadResult *TcpReadResultMessage `protobuf:"bytes,3,opt,name=tcp_read_result,json=tcpReadResult,proto3,oneof"`
}

type MessageFromWrapClient_TcpDialResult struct {
	TcpDialResult *TcpDialResultMessage `protobuf:"bytes,4,opt,name=tcp_dial_result,json=tcpDialResult,proto3,oneof"`
}

type MessageFromWrapClient_TerminalData struct {
	// Terminal Pty
	TerminalData *TerminalData `protobuf:"bytes,5,opt,name=terminal_data,json=terminalData,proto3,oneof"`
}

type MessageFromWrapClient_Hello struct {
	// metadata
	Hello *Hello `protobuf:"bytes,6,opt,name=hello,proto3,oneof"`
}

type MessageFromWrapClient_FileReadResult struct {
	// File browser
	FileReadResult *FileReadResult `protobuf:"bytes,7,opt,name=file_read_result,json=fileReadResult,proto3,oneof"`
}

type MessageFromWrapClient_FileReadDirResult struct {
	FileReadDirResult *FileReadDirResult `protobuf:"bytes,8,opt,name=file_read_dir_result,json=fileReadDirResult,proto3,oneof"`
}

func (*MessageFromWrapClient_Error) isMessageFromWrapClient_Spec() {}

func (*MessageFromWrapClient_TcpWriteResult) isMessageFromWrapClient_Spec() {}

func (*MessageFromWrapClient_TcpReadResult) isMessageFromWrapClient_Spec() {}

func (*MessageFromWrapClient_TcpDialResult) isMessageFromWrapClient_Spec() {}

func (*MessageFromWrapClient_TerminalData) isMessageFromWrapClient_Spec() {}

func (*MessageFromWrapClient_Hello) isMessageFromWrapClient_Spec() {}

func (*MessageFromWrapClient_FileReadResult) isMessageFromWrapClient_Spec() {}

func (*MessageFromWrapClient_FileReadDirResult) isMessageFromWrapClient_Spec() {}

type MessageToWrapClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Spec:
	//	*MessageToWrapClient_Error
	//	*MessageToWrapClient_TcpWriteCall
	//	*MessageToWrapClient_TcpReadCall
	//	*MessageToWrapClient_TcpDialCall
	//	*MessageToWrapClient_TerminalWrite
	//	*MessageToWrapClient_TerminalWidth
	//	*MessageToWrapClient_FileRead
	//	*MessageToWrapClient_FileReadDir
	//	*MessageToWrapClient_HelloResponse
	//	*MessageToWrapClient_Close
	Spec       isMessageToWrapClient_Spec `protobuf_oneof:"spec"`
	ListenerId uint32                     `protobuf:"varint,11,opt,name=listener_id,json=listenerId,proto3" json:"listener_id,omitempty"`
}

func (x *MessageToWrapClient) Reset() {
	*x = MessageToWrapClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WrapperMessage_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageToWrapClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageToWrapClient) ProtoMessage() {}

func (x *MessageToWrapClient) ProtoReflect() protoreflect.Message {
	mi := &file_WrapperMessage_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageToWrapClient.ProtoReflect.Descriptor instead.
func (*MessageToWrapClient) Descriptor() ([]byte, []int) {
	return file_WrapperMessage_proto_rawDescGZIP(), []int{17}
}

func (m *MessageToWrapClient) GetSpec() isMessageToWrapClient_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *MessageToWrapClient) GetError() string {
	if x, ok := x.GetSpec().(*MessageToWrapClient_Error); ok {
		return x.Error
	}
	return ""
}

func (x *MessageToWrapClient) GetTcpWriteCall() *TcpWriteMessage {
	if x, ok := x.GetSpec().(*MessageToWrapClient_TcpWriteCall); ok {
		return x.TcpWriteCall
	}
	return nil
}

func (x *MessageToWrapClient) GetTcpReadCall() *TcpReadMessage {
	if x, ok := x.GetSpec().(*MessageToWrapClient_TcpReadCall); ok {
		return x.TcpReadCall
	}
	return nil
}

func (x *MessageToWrapClient) GetTcpDialCall() *TcpDialMessage {
	if x, ok := x.GetSpec().(*MessageToWrapClient_TcpDialCall); ok {
		return x.TcpDialCall
	}
	return nil
}

func (x *MessageToWrapClient) GetTerminalWrite() *TerminalData {
	if x, ok := x.GetSpec().(*MessageToWrapClient_TerminalWrite); ok {
		return x.TerminalWrite
	}
	return nil
}

func (x *MessageToWrapClient) GetTerminalWidth() *TerminalWidth {
	if x, ok := x.GetSpec().(*MessageToWrapClient_TerminalWidth); ok {
		return x.TerminalWidth
	}
	return nil
}

func (x *MessageToWrapClient) GetFileRead() *FileRead {
	if x, ok := x.GetSpec().(*MessageToWrapClient_FileRead); ok {
		return x.FileRead
	}
	return nil
}

func (x *MessageToWrapClient) GetFileReadDir() *FileReadDir {
	if x, ok := x.GetSpec().(*MessageToWrapClient_FileReadDir); ok {
		return x.FileReadDir
	}
	return nil
}

func (x *MessageToWrapClient) GetHelloResponse() *HelloResponse {
	if x, ok := x.GetSpec().(*MessageToWrapClient_HelloResponse); ok {
		return x.HelloResponse
	}
	return nil
}

func (x *MessageToWrapClient) GetClose() bool {
	if x, ok := x.GetSpec().(*MessageToWrapClient_Close); ok {
		return x.Close
	}
	return false
}

func (x *MessageToWrapClient) GetListenerId() uint32 {
	if x != nil {
		return x.ListenerId
	}
	return 0
}

type isMessageToWrapClient_Spec interface {
	isMessageToWrapClient_Spec()
}

type MessageToWrapClient_Error struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type MessageToWrapClient_TcpWriteCall struct {
	// TCP
	TcpWriteCall *TcpWriteMessage `protobuf:"bytes,2,opt,name=tcp_write_call,json=tcpWriteCall,proto3,oneof"`
}

type MessageToWrapClient_TcpReadCall struct {
	TcpReadCall *TcpReadMessage `protobuf:"bytes,3,opt,name=tcp_read_call,json=tcpReadCall,proto3,oneof"`
}

type MessageToWrapClient_TcpDialCall struct {
	TcpDialCall *TcpDialMessage `protobuf:"bytes,4,opt,name=tcp_dial_call,json=tcpDialCall,proto3,oneof"`
}

type MessageToWrapClient_TerminalWrite struct {
	// Terminal Pty
	TerminalWrite *TerminalData `protobuf:"bytes,5,opt,name=terminal_write,json=terminalWrite,proto3,oneof"`
}

type MessageToWrapClient_TerminalWidth struct {
	TerminalWidth *TerminalWidth `protobuf:"bytes,6,opt,name=terminal_width,json=terminalWidth,proto3,oneof"`
}

type MessageToWrapClient_FileRead struct {
	// File browser
	FileRead *FileRead `protobuf:"bytes,7,opt,name=file_read,json=fileRead,proto3,oneof"`
}

type MessageToWrapClient_FileReadDir struct {
	FileReadDir *FileReadDir `protobuf:"bytes,8,opt,name=file_read_dir,json=fileReadDir,proto3,oneof"`
}

type MessageToWrapClient_HelloResponse struct {
	// metadata
	HelloResponse *HelloResponse `protobuf:"bytes,9,opt,name=hello_response,json=helloResponse,proto3,oneof"`
}

type MessageToWrapClient_Close struct {
	// signal to shut down immediately
	Close bool `protobuf:"varint,10,opt,name=close,proto3,oneof"`
}

func (*MessageToWrapClient_Error) isMessageToWrapClient_Spec() {}

func (*MessageToWrapClient_TcpWriteCall) isMessageToWrapClient_Spec() {}

func (*MessageToWrapClient_TcpReadCall) isMessageToWrapClient_Spec() {}

func (*MessageToWrapClient_TcpDialCall) isMessageToWrapClient_Spec() {}

func (*MessageToWrapClient_TerminalWrite) isMessageToWrapClient_Spec() {}

func (*MessageToWrapClient_TerminalWidth) isMessageToWrapClient_Spec() {}

func (*MessageToWrapClient_FileRead) isMessageToWrapClient_Spec() {}

func (*MessageToWrapClient_FileReadDir) isMessageToWrapClient_Spec() {}

func (*MessageToWrapClient_HelloResponse) isMessageToWrapClient_Spec() {}

func (*MessageToWrapClient_Close) isMessageToWrapClient_Spec() {}

var File_WrapperMessage_proto protoreflect.FileDescriptor

var file_WrapperMessage_proto_rawDesc = []byte{
	0x0a, 0x14, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x22, 0x4f, 0x0a, 0x0e, 0x54, 0x63, 0x70, 0x44, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x6b, 0x0a, 0x14, 0x54, 0x63, 0x70, 0x44, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x67,
	0x0a, 0x0f, 0x54, 0x63, 0x70, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x94, 0x01, 0x0a, 0x15, 0x54, 0x63, 0x70, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x73,
	0x0a, 0x0e, 0x54, 0x63, 0x70, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x54, 0x63, 0x70, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x0d, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x65, 0x77, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0x1e, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x6b, 0x0a, 0x0e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x21, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x44, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x81, 0x01, 0x0a, 0x08, 0x44, 0x69,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x44, 0x69, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x67, 0x0a,
	0x11, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x05,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x69, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x23, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf5, 0x03, 0x0a, 0x05,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x6c, 0x6c, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x69, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x69, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x22, 0x34, 0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x55, 0x72, 0x6c, 0x22, 0xb7, 0x04, 0x0a, 0x15, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x72, 0x61, 0x70, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x10, 0x74,
	0x63, 0x70, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x63, 0x70, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x74, 0x63, 0x70, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x63, 0x70,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x63, 0x70, 0x44, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x74,
	0x63, 0x70, 0x44, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0d,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x44, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x22, 0xe6, 0x04, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x57, 0x72, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x74, 0x63, 0x70, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x63, 0x70, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x63, 0x70, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x63, 0x70, 0x52, 0x65, 0x61, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x63, 0x70, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x69,
	0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x63, 0x70, 0x44, 0x69, 0x61, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x63, 0x70, 0x44, 0x69,
	0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x3b, 0x0a, 0x0d,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x12, 0x40, 0x0a, 0x0e, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x42, 0x0c, 0x5a, 0x0a,
	0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_WrapperMessage_proto_rawDescOnce sync.Once
	file_WrapperMessage_proto_rawDescData = file_WrapperMessage_proto_rawDesc
)

func file_WrapperMessage_proto_rawDescGZIP() []byte {
	file_WrapperMessage_proto_rawDescOnce.Do(func() {
		file_WrapperMessage_proto_rawDescData = protoimpl.X.CompressGZIP(file_WrapperMessage_proto_rawDescData)
	})
	return file_WrapperMessage_proto_rawDescData
}

var file_WrapperMessage_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_WrapperMessage_proto_goTypes = []interface{}{
	(*TcpDialMessage)(nil),        // 0: protocol.TcpDialMessage
	(*TcpDialResultMessage)(nil),  // 1: protocol.TcpDialResultMessage
	(*TcpWriteMessage)(nil),       // 2: protocol.TcpWriteMessage
	(*TcpWriteResultMessage)(nil), // 3: protocol.TcpWriteResultMessage
	(*TcpReadMessage)(nil),        // 4: protocol.TcpReadMessage
	(*TcpReadResultMessage)(nil),  // 5: protocol.TcpReadResultMessage
	(*TerminalData)(nil),          // 6: protocol.TerminalData
	(*TerminalWidth)(nil),         // 7: protocol.TerminalWidth
	(*FileRead)(nil),              // 8: protocol.FileRead
	(*FileReadResult)(nil),        // 9: protocol.FileReadResult
	(*FileReadDir)(nil),           // 10: protocol.FileReadDir
	(*DirEntry)(nil),              // 11: protocol.DirEntry
	(*FileReadDirResult)(nil),     // 12: protocol.FileReadDirResult
	(*Service)(nil),               // 13: protocol.Service
	(*Hello)(nil),                 // 14: protocol.Hello
	(*HelloResponse)(nil),         // 15: protocol.HelloResponse
	(*MessageFromWrapClient)(nil), // 16: protocol.MessageFromWrapClient
	(*MessageToWrapClient)(nil),   // 17: protocol.MessageToWrapClient
}
var file_WrapperMessage_proto_depIdxs = []int32{
	11, // 0: protocol.FileReadDirResult.entry:type_name -> protocol.DirEntry
	13, // 1: protocol.Hello.service:type_name -> protocol.Service
	3,  // 2: protocol.MessageFromWrapClient.tcp_write_result:type_name -> protocol.TcpWriteResultMessage
	5,  // 3: protocol.MessageFromWrapClient.tcp_read_result:type_name -> protocol.TcpReadResultMessage
	1,  // 4: protocol.MessageFromWrapClient.tcp_dial_result:type_name -> protocol.TcpDialResultMessage
	6,  // 5: protocol.MessageFromWrapClient.terminal_data:type_name -> protocol.TerminalData
	14, // 6: protocol.MessageFromWrapClient.hello:type_name -> protocol.Hello
	9,  // 7: protocol.MessageFromWrapClient.file_read_result:type_name -> protocol.FileReadResult
	12, // 8: protocol.MessageFromWrapClient.file_read_dir_result:type_name -> protocol.FileReadDirResult
	2,  // 9: protocol.MessageToWrapClient.tcp_write_call:type_name -> protocol.TcpWriteMessage
	4,  // 10: protocol.MessageToWrapClient.tcp_read_call:type_name -> protocol.TcpReadMessage
	0,  // 11: protocol.MessageToWrapClient.tcp_dial_call:type_name -> protocol.TcpDialMessage
	6,  // 12: protocol.MessageToWrapClient.terminal_write:type_name -> protocol.TerminalData
	7,  // 13: protocol.MessageToWrapClient.terminal_width:type_name -> protocol.TerminalWidth
	8,  // 14: protocol.MessageToWrapClient.file_read:type_name -> protocol.FileRead
	10, // 15: protocol.MessageToWrapClient.file_read_dir:type_name -> protocol.FileReadDir
	15, // 16: protocol.MessageToWrapClient.hello_response:type_name -> protocol.HelloResponse
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_WrapperMessage_proto_init() }
func file_WrapperMessage_proto_init() {
	if File_WrapperMessage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_WrapperMessage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpDialMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WrapperMessage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpDialResultMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WrapperMessage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpWriteMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WrapperMessage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpWriteResultMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WrapperMessage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpReadMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WrapperMessage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpReadResultMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WrapperMessage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WrapperMessage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalWidth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WrapperMessage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WrapperMessage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileReadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WrapperMessage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileReadDir); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WrapperMessage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WrapperMessage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileReadDirResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WrapperMessage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WrapperMessage_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WrapperMessage_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WrapperMessage_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageFromWrapClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WrapperMessage_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageToWrapClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_WrapperMessage_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*MessageFromWrapClient_Error)(nil),
		(*MessageFromWrapClient_TcpWriteResult)(nil),
		(*MessageFromWrapClient_TcpReadResult)(nil),
		(*MessageFromWrapClient_TcpDialResult)(nil),
		(*MessageFromWrapClient_TerminalData)(nil),
		(*MessageFromWrapClient_Hello)(nil),
		(*MessageFromWrapClient_FileReadResult)(nil),
		(*MessageFromWrapClient_FileReadDirResult)(nil),
	}
	file_WrapperMessage_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*MessageToWrapClient_Error)(nil),
		(*MessageToWrapClient_TcpWriteCall)(nil),
		(*MessageToWrapClient_TcpReadCall)(nil),
		(*MessageToWrapClient_TcpDialCall)(nil),
		(*MessageToWrapClient_TerminalWrite)(nil),
		(*MessageToWrapClient_TerminalWidth)(nil),
		(*MessageToWrapClient_FileRead)(nil),
		(*MessageToWrapClient_FileReadDir)(nil),
		(*MessageToWrapClient_HelloResponse)(nil),
		(*MessageToWrapClient_Close)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_WrapperMessage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_WrapperMessage_proto_goTypes,
		DependencyIndexes: file_WrapperMessage_proto_depIdxs,
		MessageInfos:      file_WrapperMessage_proto_msgTypes,
	}.Build()
	File_WrapperMessage_proto = out.File
	file_WrapperMessage_proto_rawDesc = nil
	file_WrapperMessage_proto_goTypes = nil
	file_WrapperMessage_proto_depIdxs = nil
}
